version: '3.8'

services:
  # API Gateway - The main application
  api-gateway:
    build: 
      context: ../api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file: 
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - OIDC_URL=http://keycloak:8080/auth
      - APP_ENVIRONMENT=${APP_ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - retail-network
    volumes:
      - ../api-gateway/src:/app/src:ro  # For development auto-reload

  # Redis - For caching and rate limiting
  redis:
    image: redis:7-alpine
    ports: 
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - retail-network

  # Keycloak - For authentication and authorization
  keycloak:
    build: 
      context: ../keycloak
      dockerfile: Dockerfile
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD:-keycloak}
      - KC_HEALTH_ENABLED=true
    ports: 
      - "8080:8080"
    volumes:
      - ../keycloak/realm-config:/opt/keycloak/data/import:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - retail-network

  # PostgreSQL - For Keycloak data storage
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=${KEYCLOAK_DB_PASSWORD:-keycloak}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - retail-network

  # Prometheus - For metrics collection
  prometheus:
    build: 
      context: ../monitoring/prometheus
      dockerfile: Dockerfile
    ports: 
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - retail-network

  # Grafana - For metrics visualization
  grafana:
    build: 
      context: ../monitoring/grafana
      dockerfile: Dockerfile
    ports: 
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - retail-network

  # Demo Product Service - Mocked service for demonstration
  product-service:
    image: mockoon/cli:latest
    command: ["--data", "/data/product-service.json", "--port", "8001"]
    volumes:
      - ../mocks:/data:ro
    ports:
      - "8001:8001"
    networks:
      - retail-network

# Volumes for persistent data
volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

# Networks
networks:
  retail-network:
    driver: bridge